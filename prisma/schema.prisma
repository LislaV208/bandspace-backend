// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  email         String      @unique
  name          String
  authId        String      @unique  // Store Auth0 user ID (sub)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  workspaces    WorkspaceMember[]
  comments      Comment[]
  uploadedFiles AudioFile[]
}

model Workspace {
  id          String      @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  members     WorkspaceMember[]
  files       AudioFile[]
  comments    Comment[]
}

model WorkspaceMember {
  id          String    @id @default(uuid())
  userId      String
  workspaceId String
  role        String?   // e.g., "admin", "member"
  roleTag     String?   // e.g., "guitarist", "vocalist"
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
}

model AudioFile {
  id          String    @id @default(uuid())
  name        String
  s3Key       String    @unique
  workspaceId String
  uploaderId  String
  fileSize    Int
  duration    Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  uploader    User      @relation(fields: [uploaderId], references: [id])
  comments    Comment[]
}

model Comment {
  id          String    @id @default(uuid())
  content     String
  workspaceId String
  fileId      String?
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  file        AudioFile? @relation(fields: [fileId], references: [id])
  author      User      @relation(fields: [authorId], references: [id])
}
